package se.sics.kola.examples.pingpong;

event Ping

port PingPongPort {
	indication { Ping }
	request { Ping }
}

componentdef ParentC {
	component PingerC() pinger;
	component PongerC() ponger;

	!connect ponger => pinger: PingPongPort;
}

componentdef PingerC {
	requires PingPongPort ppp;
	private long sent = 0;
	private long received = 0;
	private long startTs;

	handle startHandler => control : Start e {
		startTs = System.currentTimeMillis();
		for (int i = 0; i < Main.BATCH_SIZE; i++) {
			!trigger Ping.event => ppp;
		}
		sent = Main.BATCH_SIZE;
	}

	handle pongHandler => ppp : Ping pong {
		received += 1;
		if (sent < Main.REPEAT) {
			!trigger Ping.event => ppp;
			sent += 1;
		} else if (received >= Main.REPEAT) {
			long endTs = System.currentTimeMillis();
			long diff = endTs - startTs;
			long tp = (received / (diff/1000));
			System.out.println(String.format("Final Throughput: %,d msgs/s", tp));
			Kompics.asyncShutdown();
		}
	}
}

componentdef PongerC {
	provides PingPongPort ppp;

	handle pingHandler => ppp : Ping ping {
		!trigger ping => ppp;
	}
}

public class Main {

	public static final int BATCH_SIZE = 50;
	public static final long REPEAT = 50000000;

	public static void main(String[] args) {
		try {
			Kompics.createAndStart(ParentC.class, 2, BATCH_SIZE);
			Kompics.waitForTermination();
		} catch(InterruptedException ex) {
			System.err.println("Got rudely interruped!");
			System.exit(1);
		}
	}	
}
